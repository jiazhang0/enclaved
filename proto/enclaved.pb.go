// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enclaved.proto

package enclaved_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AttestChallenge struct {
	Nonce                []byte   `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestChallenge) Reset()         { *m = AttestChallenge{} }
func (m *AttestChallenge) String() string { return proto.CompactTextString(m) }
func (*AttestChallenge) ProtoMessage()    {}
func (*AttestChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5cb70e6aa2dfda7, []int{0}
}

func (m *AttestChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestChallenge.Unmarshal(m, b)
}
func (m *AttestChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestChallenge.Marshal(b, m, deterministic)
}
func (m *AttestChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestChallenge.Merge(m, src)
}
func (m *AttestChallenge) XXX_Size() int {
	return xxx_messageInfo_AttestChallenge.Size(m)
}
func (m *AttestChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_AttestChallenge proto.InternalMessageInfo

func (m *AttestChallenge) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type AttestResponse struct {
	Quote                []byte   `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestResponse) Reset()         { *m = AttestResponse{} }
func (m *AttestResponse) String() string { return proto.CompactTextString(m) }
func (*AttestResponse) ProtoMessage()    {}
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5cb70e6aa2dfda7, []int{1}
}

func (m *AttestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestResponse.Unmarshal(m, b)
}
func (m *AttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestResponse.Marshal(b, m, deterministic)
}
func (m *AttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestResponse.Merge(m, src)
}
func (m *AttestResponse) XXX_Size() int {
	return xxx_messageInfo_AttestResponse.Size(m)
}
func (m *AttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestResponse proto.InternalMessageInfo

func (m *AttestResponse) GetQuote() []byte {
	if m != nil {
		return m.Quote
	}
	return nil
}

func init() {
	proto.RegisterType((*AttestChallenge)(nil), "enclaved_proto.AttestChallenge")
	proto.RegisterType((*AttestResponse)(nil), "enclaved_proto.AttestResponse")
}

func init() {
	proto.RegisterFile("enclaved.proto", fileDescriptor_a5cb70e6aa2dfda7)
}

var fileDescriptor_a5cb70e6aa2dfda7 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcd, 0x4b, 0xce,
	0x49, 0x2c, 0x4b, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x82, 0xf3, 0xe3, 0xc1, 0x7c,
	0x25, 0x75, 0x2e, 0x7e, 0xc7, 0x92, 0x92, 0xd4, 0xe2, 0x12, 0xe7, 0x8c, 0xc4, 0x9c, 0x9c, 0xd4,
	0xbc, 0xf4, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xbc, 0xfc, 0xbc, 0xe4, 0x54, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0x9e, 0x20, 0x08, 0x47, 0x49, 0x8d, 0x8b, 0x0f, 0xa2, 0x30, 0x28, 0xb5, 0xb8, 0x20, 0x3f,
	0xaf, 0x18, 0xac, 0xae, 0xb0, 0x34, 0xbf, 0x24, 0x55, 0x82, 0x09, 0xa2, 0x0e, 0xcc, 0x31, 0x4a,
	0xe2, 0xe2, 0x70, 0x85, 0x5a, 0x21, 0x14, 0xc6, 0x25, 0xe8, 0x99, 0x97, 0x59, 0x92, 0x99, 0x58,
	0x92, 0x8a, 0x30, 0x5e, 0x5e, 0x0f, 0xd5, 0x09, 0x7a, 0x68, 0xf6, 0x4b, 0xc9, 0x61, 0x57, 0x00,
	0xb3, 0x57, 0x89, 0x21, 0x89, 0x0d, 0x2c, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x4e,
	0xeb, 0xeb, 0xdd, 0x00, 0x00, 0x00,
}
